# -*- coding: utf-8 -*-
"""nueral

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14glE5olIGittwFAQs5Gc3rUojgvWtA4B
"""

import tensorflow as tf
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from google.colab import drive
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical
drive.mount('/content/drive')
import sys
import numpy as np

np.set_printoptions(threshold=sys.maxsize)

file='/content/drive/MyDrive/Colab Notebooks/데이터 판다스용완.csv'

data=pd.read_csv(file)

data=data.dropna()

data.drop(columns=['순번','장르','국적.1','연휴 및 기념일 상영 여부','수상'],inplace=True)
data.set_index('영화명',inplace=True)
target=data['전국 관객수']
target.dropna(inplace=True)
x=data.drop(columns=['전국 매출액','전국 관객수'])
y=target

for i in range(len(y)):
  if y[i]>7000000:
    y[i]=4
  elif y[i]>5000000 and y[i]<=7000000:
    y[i]=3
  elif y[i]>3000000 and y[i]<=5000000:
    y[i]=2
  elif y[i]>1000000 and y[i]<=3000000:
    y[i]=1
  else:
    y[i]=0
  x=np.array(x)
  y=np.array(y)

x_train,x_val,y_train,y_val=train_test_split(x,y,test_size=0.2,random_state=777)

y_train=to_categorical(y_train)
y_val=to_categorical(y_val)

model=Sequential()
model.add(Dense(64, activation='relu',input_shape=(36,)))
model.add(Dense(32, activation='relu'))
model.add(Dense(5,activation='softmax'))

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['acc'])

history=model.fit(x_train,y_train,epochs=30,batch_size=40,validation_data=(x_val,y_val))

import matplotlib.pyplot as plt
his_dict=history.history
loss=his_dict['loss']
val_loss=his_dict['val_loss']
epochs=range(1,len(loss)+1)
fig=plt.figure(figsize=(10,5))
ax1=fig.add_subplot(1,2,1)
ax1.plot(epochs,loss,color='blue',label='train_loss')
ax1.plot(epochs,val_loss,color='orange',label='val_loss')
ax1.set_title('train and val loss')
ax1.set_xlabel('epochs')
ax1.set_ylabel('loss')
ax1.legend()

acc=his_dict['acc']
val_acc=his_dict['val_acc']

ax2=fig.add_subplot(1,2,2)
ax2.plot(epochs,acc,color='blue',label='train_acc')
ax2.plot(epochs,val_acc,color='orange',label='val_acc')
ax2.set_title('train and val acc')
ax2.set_xlabel('epochs')
ax2.set_ylabel('acc')
ax2.legend()
plt.show()

results=model.predict(x_val)
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns

plt.figure(figsize=(7,7))
cm=confusion_matrix(np.argmax(y_val,axis=-1),np.argmax(results,axis=-1))
sns.heatmap(cm,annot=True,fmt='d',cmap='Blues')
plt.xlabel('predicted label')
plt.ylabel('true label')
plt.show()

print('\n',classification_report(np.argmax(y_val,axis=-1),np.argmax(results,axis=-1)))

